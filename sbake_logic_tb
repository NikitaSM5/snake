library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all; 
use work.state.all; 
use IEEE.STD_LOGIC_TEXTIO.ALL;
use STD.TEXTIO.ALL;			

entity snake_logic_tb is
end snake_logic_tb;

architecture testbench of snake_logic_tb is
	
	constant FIELD_SIZE_X : integer := 20;
	constant FIELD_SIZE_Y : integer := 20;
	
	component snake_logic is
		port (
			CLOCK_50 : in std_logic;
			game_clk_en : in std_logic;
			current_direction : in direction;
			o_snake : out snake;
			o_fruit : out position;
			reset_snake : in std_logic
			);	 
	end component;
	
	signal CLOCK_50_tb : std_logic := '0';
	signal game_clk_en_tb : std_logic := '0';
	signal current_direction_tb : direction := RIGHT;
	signal o_snake_tb : snake;
	signal o_fruit_tb : position;
	signal reset_snake_tb : std_logic := '0';
	signal iteration_tb : integer;
	signal counter: integer := 0;
	
	file snake_file : text open write_mode is "snake_position.txt";
	
begin
	
	test : snake_logic port map (
		CLOCK_50 => CLOCK_50_tb,
		game_clk_en => game_clk_en_tb,
		current_direction => current_direction_tb, 
		o_snake => o_snake_tb, 
		o_fruit => o_fruit_tb,
		reset_snake => reset_snake_tb
		);
	
	process 
	begin
		CLOCK_50_tb <= '1';
		wait for 10 ns;
		CLOCK_50_tb <= '0';
		wait for 10 ns;
	end process; 
	
	process(CLOCK_50_tb)
	begin	
		if rising_edge(CLOCK_50_tb) then
			if counter = 10 then
				game_clk_en_tb <= '1';
				counter <= 0; 
			else 
				game_clk_en_tb <= '0';
				counter <= counter + 1;
			end if;
		end if;
	end process;
	

control : process(game_clk_en_tb)
	variable step : integer := 0;
begin 
	if rising_edge(game_clk_en_tb) then
		case step is
			when 19 => 
				current_direction_tb <= DOWN;
			when 20 => 
				current_direction_tb <= LEFT;
			when 39 => 
				current_direction_tb <= DOWN;
			when 40 => 
				current_direction_tb <= RIGHT;
				step := 0;
			when others => 
				null;
		end case;
		step := step + 1;
	end if;
end process;

	

	process (CLOCK_50_tb)  
		variable line_data : line;
		variable game_field : string(1 to FIELD_SIZE_X * FIELD_SIZE_Y); 
		variable x, y : integer;
		variable index : integer;
		variable iteration_counter : integer := 0;
	begin
		if rising_edge(CLOCK_50_tb) and game_clk_en_tb = '1' then
			for i in 1 to FIELD_SIZE_X * FIELD_SIZE_Y loop
				game_field(i) := ' ';  
			end loop;
			
		
			if (o_snake_tb.head.x >= 0 and o_snake_tb.head.x < FIELD_SIZE_X and
				o_snake_tb.head.y >= 0 and o_snake_tb.head.y < FIELD_SIZE_Y) then
				index := (o_snake_tb.head.y * FIELD_SIZE_X) + o_snake_tb.head.x + 1;
				game_field(index) := '0';
			end if;
			
		
			for i in 0 to o_snake_tb.tail_length - 1 loop
				if (o_snake_tb.tail(i).x >= 0 and o_snake_tb.tail(i).x < FIELD_SIZE_X and
					o_snake_tb.tail(i).y >= 0 and o_snake_tb.tail(i).y < FIELD_SIZE_Y) then
					index := (o_snake_tb.tail(i).y * FIELD_SIZE_X) + o_snake_tb.tail(i).x + 1;
					game_field(index) := 'o';
				end if;
			end loop;
			
		
			if (o_fruit_tb.x >= 0 and o_fruit_tb.x < FIELD_SIZE_X and
				o_fruit_tb.y >= 0 and o_fruit_tb.y < FIELD_SIZE_Y) then
				index := (o_fruit_tb.y * FIELD_SIZE_X) + o_fruit_tb.x + 1;
				game_field(index) := 'F';
			end if;
			
		
			for y in 0 to FIELD_SIZE_Y - 1 loop
				write(line_data, string'(""));  
				for x in 0 to FIELD_SIZE_X - 1 loop
					index := (y * FIELD_SIZE_X) + x + 1;
					write(line_data, game_field(index));
				end loop;
				writeline(snake_file, line_data); 
			end loop;
			
			write(line_data, "Iteration: " & integer'image(iteration_counter));
			writeline(snake_file, line_data);
			
			iteration_counter := iteration_counter + 1;
			iteration_tb <= iteration_counter;
		end if;
	end process;
	
end testbench;
